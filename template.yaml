AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  burnedover-mush-app

  SAM Template for burnedover-mush, a serverless multiplayer text roleplaying system,
  with DynamoDB storage, React front-end and administrative tools.

Parameters:
  TablePrefix:
    Type: String
    Default: 'burnedover'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

Resources:
  SimpleChatWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: BurnedOverRealTimeSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.message"
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  RegisterNameRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      RouteKey: registername
      AuthorizationType: NONE
      OperationName: RegisterNameRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref RegisterNameInteg
  RegisterNameInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref SimpleChatWebSocket
      Description: Register Name Integtration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterNameFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
    - ConnectRoute
    - SendRoute
    - RegisterNameRoute
    - DisconnectRoute
    Properties:
      ApiId: !Ref SimpleChatWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref SimpleChatWebSocket
  PlayersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: "connectionId"
        AttributeType: "S"
      BillingMode: "PAY_PER_REQUEST"
      KeySchema:
      - AttributeName: "connectionId"
        KeyType: "HASH"
      SSESpecification:
        SSEEnabled: True
      TableName: !Sub '${TablePrefix}_players'
  PermanentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "permanentId"
          AttributeType: "S"
        - AttributeName: "parentId"
          AttributeType: "S"
        - AttributeName: "fromRoomId"
          AttributeType: "S"
      BillingMode: "PAY_PER_REQUEST"
      KeySchema:
        - AttributeName: "permanentId"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: fromRoomIndex
          KeySchema:
            - AttributeName: fromRoomId
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - name
              - parentId
            ProjectionType: INCLUDE
        - IndexName: parentIndex
          KeySchema:
            - AttributeName: parentId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: True
      TableName: !Sub '${TablePrefix}_permanents'
  SharedLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
        LayerName: shared-layer
        Description: Lambda layer with shared code for functions
        ContentUri: lambda/shared/
        CompatibleRuntimes:
          - nodejs12.x
  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/onconnect/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Layers:
        - !Ref SharedLambdaLayer
      Environment:
        Variables:
          TABLE_PREFIX: !Ref TablePrefix
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub '${TablePrefix}_players'
      - DynamoDBReadPolicy:
          TableName: !Sub '${TablePrefix}_permanents'
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
      - OnConnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/ondisconnect/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Layers:
        - !Ref SharedLambdaLayer
      Environment:
        Variables:
          TABLE_PREFIX: !Ref TablePrefix
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub '${TablePrefix}_players'
      - DynamoDBReadPolicy:
          TableName: !Sub '${TablePrefix}_permanents'
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
      - OnDisconnectFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/sendmessage/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Layers:
        - !Ref SharedLambdaLayer
      Environment:
        Variables:
          TABLE_PREFIX: !Ref TablePrefix
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub '${TablePrefix}_players'
      - DynamoDBReadPolicy:
          TableName: !Sub '${TablePrefix}_permanents'
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
      - SendMessageFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com
  RegisterNameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/registername/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Layers:
        - !Ref SharedLambdaLayer
      Environment:
        Variables:
          TABLE_PREFIX: !Ref TablePrefix
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub '${TablePrefix}_players'
      - DynamoDBReadPolicy:
          TableName: !Sub '${TablePrefix}_permanents'
      - Statement:
        - Effect: Allow
          Action:
          - 'execute-api:ManageConnections'
          Resource:
          - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleChatWebSocket}/*'
  RegisterNamePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SimpleChatWebSocket
      - RegisterNameFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RegisterNameFunction
      Principal: apigateway.amazonaws.com
  PermanentsAdminAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: PermanentsAdminAPI
      Description: An API to grant REST access into the permanents table
  PermanentsAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:BatchGetItem"
              - "dynamodb:Query"
              - "dynamodb:PutItem"
            Resource: !GetAtt "PermanentsTable.Arn"
  PermanentsAPIExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action:
            - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - !Ref PermanentsAccessPolicy
      Policies:
        - PolicyName: logging
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  RoomResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PermanentsAdminAPI
      ParentId: !GetAtt
        - PermanentsAdminAPI
        - RootResourceId
      PathPart: "room"
  RoomOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref PermanentsAdminAPI
      ResourceId: !Ref RoomResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  GetRoomResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PermanentsAdminAPI
      ParentId: !Ref RoomResource
      PathPart: "{roomId}"
  GetRoomOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref PermanentsAdminAPI
      ResourceId: !Ref GetRoomResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  GetRoomMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.roomId: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Credentials: !GetAtt "PermanentsAPIExecutionRole.Arn"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem"
        RequestTemplates:
          application/json: !Sub >-
            {
                "TableName": "${TablePrefix}_permanents",
                "Key": {
                    "permanentId": { "S": "$input.params('roomId')" }
                }
            }
        IntegrationResponses:
          - ResponseTemplates:
              application/json: >-
                #set($inputRoot = $input.path('$.Item'))
                {
                    "roomId": "$inputRoot.permanentId.S",
                    "name": "$inputRoot.name.S",
                    "description": "$inputRoot.description.S",
                    "exits": [
                        #foreach($exit in $inputRoot.exits.L) {
                            "exitName": "$exit.M.exitName.S",
                            "toRoomId": "$exit.M.toRoomId.S"
                        }#if($foreach.hasNext),#end
                        #end
                    ]
                }
            StatusCode: 200
        RequestParameters:
          integration.request.path.roomId: "method.request.path.roomId"
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: 200
      ResourceId: !Ref GetRoomResource
      RestApiId: !Ref PermanentsAdminAPI
  PutRoomFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/permanents/putRoom/
      Handler: app.handler
      MemorySize: 256
      Runtime: nodejs12.x
      Layers:
        - !Ref SharedLambdaLayer
      Environment:
        Variables:
          TABLE_PREFIX: !Ref TablePrefix
      Policies:
      - DynamoDBCrudPolicy:
          TableName: !Sub '${TablePrefix}_permanents'
  PutRoomPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - PermanentsAdminAPI
      - PutRoomFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref PutRoomFunction
      Principal: apigateway.amazonaws.com
  PutRoomMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        # Credentials: !GetAtt "PermanentsAPIExecutionRole.Arn"
        Uri:
          Fn::Sub:
              arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutRoomFunction.Arn}/invocations
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: 200
      ResourceId: !Ref RoomResource
      RestApiId: !Ref PermanentsAdminAPI

Outputs:
  PlayersTableArn:
    Description: "Players table ARN"
    Value: !GetAtt PlayersTable.Arn

  OnConnectFunctionArn:
    Description: "OnConnect function ARN"
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: "OnDisconnect function ARN"
    Value: !GetAtt OnDisconnectFunction.Arn

  SendMessageFunctionArn:
    Description: "SendMessage function ARN"
    Value: !GetAtt SendMessageFunction.Arn

  RegisterNameFunctionArn:
    Description: "RegisterName function ARN"
    Value: !GetAtt RegisterNameFunction.Arn

  WebSocketURI:
    Description: "The WSS Protocol URI to connect to"
    Value: !Join [ '', [ 'wss://', !Ref SimpleChatWebSocket, '.execute-api.',!Ref 'AWS::Region','.amazonaws.com/',!Ref 'Stage'] ]
